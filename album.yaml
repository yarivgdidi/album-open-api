openapi: 3.0.2
info:
  version: 1.0.0
  title: Open Api album example
  description: Well B home exercise  OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: http://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:3000/api
tags:
  - name: album
    description: Album
  - name: favorite
    description: Operations about favorite album
paths:
  /album:
    get:
      tags: 
        - album
      summary: List albums
      description: List all albums with user access
      operationId: listAlbums
      parameters:
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: offset from beginning of list (for pagination)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of albums
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Album"
        '204':
          description: No Content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags: 
        - album
      summary: Create album
      description: Creates a new Album in the store
      operationId: addAlbum
      requestBody:
        description: Albums to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAlbum'
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Album'
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '405':
          description: Invalid input
  /album/{id}:
    get:
      tags: 
        - album
      summary: Get album by ID
      description: Returns an album based on a single ID,
      operationId: findAlbumById
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Album'
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: 
        - album
      summary: Update album
      description: 'Updates album by ID '
      operationId: updatePetWithForm
      parameters:
        - name: id
          in: path
          description: ID of album that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Albums to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'      
      responses:
        '204':
          description: No Content
        '405':
          description: Invalid input
    delete:
      tags: 
        - album
      summary: Delete an album
      description: deletes a single album based on the ID supplied
      operationId: deleteAlbum
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: pet deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /favorite:
    get:
      tags: 
        - favorite
      description: List all favorites relations 
      operationId: listFavorites
      responses:
        '200':
          description: An array of favorites relations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Favorite"
        '204':
          description: No Content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags: 
        - favorite
      description: Creates a new Album in the store
      operationId: addFavorite
      requestBody:
        description: Add Favorite album
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFavorite'
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Favorite'
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
        '405':
          description: Invalid input
  /favorite/{id}:
    delete:
      tags: 
        - favorite
      description: deletes a favorite based on the ID supplied
      operationId: deleteFavorite
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: pet deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Album:
      allOf:
        - $ref: '#/components/schemas/NewAlbum'
        - type: object
          required:
          - id
          properties:
            id:
              type: integer
              format: int64
            favorite: 
              type: object
              $ref: '#/components/schemas/Favorite'
    NewAlbum:
      type: object
      required:
        - userId
        - title
        - _id      
      properties:
        userId:
          type: integer
          format: int64
        title:
          type: string
        _id:
          type: string
    Favorite:
      allOf:
        - $ref: '#/components/schemas/NewFavorite'
        - type: object
          required:
          - id
          properties:
            id:
              type: integer
              format: int64
    NewFavorite:
      type: object
      required:
        - userId
        - albumId
      properties:
        userId:
          type: integer
          format: int64
        albumId:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string